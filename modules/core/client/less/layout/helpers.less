/**
 * Triangle helper
 *
 * .triangle(@direction, @size, @color)
 * .triangle(@direction, @width, @height, @color)
 *
 * @direction defines the direction: up, down, left or right.
 * @size defines the size of triangle
 * @width defines the width of triangle
 * @height defines the height of triangle
 * @color defines the color
 *
 * Example: .triangle(down, 3em, 5px, #fff);
 *
 * @link https://github.com/stijnj/less-triangle
 */
.triangle-base() {
  content: '';
  display: block;
  width: 0;
  height: 0;
}
.triangle(@direction, @size, @color) {
  .triangle(@direction, @size * 2, @size, @color);
}
.triangle(@direction, @width, @height, @color) when (@direction = up) {
  .triangle-base();
  border-left: (@width / 2)solid transparent;
  border-right: (@width / 2)solid transparent;
  border-bottom: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = down) {
  .triangle-base();
  border-left: (@width / 2) solid transparent;
  border-right: (@width / 2) solid transparent;
  border-top: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = left) {
  .triangle-base();
  border-top: (@width / 2) solid transparent;
  border-bottom: (@width / 2) solid transparent;
  border-right: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = right) {
  .triangle-base();
  border-top: (@width / 2) solid transparent;
  border-bottom: (@width / 2) solid transparent;
  border-left: @height solid @color;
}


/**
 * Build triangle for panels
 */
@panel-triangle-size: 8px;
.panel-triangle-base() {
  position: relative;
  &:before,
  &:after {
    position: absolute;
    top: (2 * @panel-triangle-size);
  }
}
.panel-triangle-right() {
  .panel-triangle-base();
  &:before {
    .triangle(right, @panel-triangle-size, @panel-border);
    right: -(@panel-triangle-size + 1);
  }
  &:after {
    .triangle(right, @panel-triangle-size, @panel-bg);
    right: -@panel-triangle-size;
  }
}
.panel-triangle-left() {
  .panel-triangle-base();
  &:before {
    .triangle(left, @panel-triangle-size, @panel-border);
    left: -(@panel-triangle-size + 1);
  }
  &:after {
    .triangle(left, @panel-triangle-size, @panel-bg);
    left: -@panel-triangle-size;
  }
}

// To make these <a><img></a> work
.block-link {
  &, &:hover {
    text-decoration: none;
    text-shadow: none;
  }
}

// Reset default cursor
.cursor-pointer {
  cursor: pointer;
}

// For help-icons/buttons
.cursor-help {
  cursor: help;
}

// No messages / no contacts etc -type messages
.content-empty {
  text-align: center;
  &, i {
    .text-muted;
  }
}

.content-wait {
  text-align: center;
  font-style: italic;
  .text-muted;
  margin: 50px 0;
}

/**
 * Little helper icons
 * E.g. `<a tabindex="0" class="icon-help cursor-help tr-help"></a>`
 */
.tr-help {
  color: @gray-light;
  outline: none;
  &:hover {
    text-decoration: none;
    color: @brand-primary;
  }
}

/**
 * Middle helper
 *
 * Usage:
 * <div class="middle">
 *   <div class="middle-wrapper">...</div>
 * </div>
 *
 * Or also horizontal:
 * <div class="middle middle-horizontal">
 *   <div class="middle-wrapper">...</div>
 * </div>
 *
 * See https://github.com/kg782/angular-middle if you need this as an Angular directive.
 */
.middle-wrapper {
  display: table;
  width: 100%;
  height: 100%;
  .middle-content {
    display: table-cell;
    vertical-align: middle;
  }
  &.middle-wrapper-horizontal .middle-content > * {
    margin: auto;
  }
}

/**
 * Middle wrapper using flex
 * Since we're using Bootstrap 3, which doesn't yet support flex,
 * this is here to help with middle align on less important places.
 * It's more convenient than `middlw-wrapper` which uses table-cell hack.
 *
 * Usage:
 * <div class="flex-centered">
 *   <div>...</div>
 * </div>
 */
.flex-centered {
  height: 100%;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  align-items: center;
  justify-content: center;
}
